SUPER KEY WORD:

{

    so jab super call hota hai....toh jo bhi propewrty parent intialise krta hai
    vo child ke 'this' mei hoti hai ...aur parent ke this se koi relation nai....

     code snippet example
    /*
    class A {
  constructor() {
    this.name = "Parent";
    console.log("Inside A:", this);
  }
}

class B extends A {
  constructor() {
    super(); // Ask parent to do their setup
    this.name = "Child"; // Override or add more
    console.log("Inside B:", this);
  }
}

const obj = new B();

     */
    // here
    /*
    You say: new B()

Inside Bâ€™s constructor, it calls super() â†’ this means:
ðŸ‘‰ "Hey Parent (A), please run your constructor!"

Parent class (A) runs. It sets this.name = "Parent"
But wait â€” what is this here?
ðŸ‘‰ It's the child object being created (B), not some separate "A".

Then control comes back to B, and it says
this.name = "Child" â€” so it updates the same object.

So, the final object is a B object that was initialized by A
     */

    // soo

    /*
    this in the child is its own object.

But when super() is called, the parent works on the same object.

So the parent doesnâ€™t return something new â€” it helps the child get set up.


     */
}

JSON AND BSON :
{
JSON IS AN OBJECT BUT IN STING FORM...
ITS SEEMS LIKE AN OBJECT BUT ITS A TEXT...
WE CAN CONVERT IT INTO AN OBJECT --> PARSE(JSON)
WE CAN CONVERT AN OBJECT TO JSON --->.STRINGIFY()

BSON ..IS JSON IN BINARY FROMAT FOR RFFICIENTLY STORING DATA ..
AND FASTER READING DATA
}
ABOUT ARROW FUNC:
{
they donot have their own context i.e "this"
}

JWT:{
its a bearer token.....
jo bhi isko bearkrta hai ...usko data bhejdunga...

}

middleware {
JAANE SE PEHLE MUJSE MILTE JANA..
ANNE SE PEHLE MUJE BATADENA
}

MULTER :
{
There are two options available, destination and filename. They are both functions that determine where the file should be stored.
destination is used to determine within which folder the uploaded files should be stored. This can also be given as a string (e.g. '/tmp/uploads'). If no destination is given, the operating system's default directory for temporary files is used.
Note: You are responsible for creating the directory when providing destination as a function. When passing a string, multer will make sure that the directory is created for you.
filename is used to determine what the file should be named inside the folder. If no filename is given, each file will be given a random name that doesn't include any file extension.
Note: Multer will not append any file extension for you, your function should return a filename complete with a file extension.
Each function gets passed both the request (req) and some information about the file (file) to aid with the decision.
Note that req.body might not have been fully populated yet. It depends on the order that the client transmits fields and files to the server.
For understanding the calling convention used in the callback (needing to pass null as the first param), refer to Node.js error handling
}

ABOUT ASYNCHANDLER:
{
ye basicalyyyy ek format hai jo muje return krega function jiosme try catch already handled
hooonge.....
toh mujeee har controller ke liye try catch likhne ki zarurat nai

....
async handler doesn't run the parameter function...it return a function that can run a parameter function when called....
also the parameter function is not helping the async handler with any property..
the asynchandler is just putting that function into try and catch..
}

.SOME() METHOD :
{
some runs on each array input and returns true or false
with condition given
}

ACCESS AND REFRESH TOKEN:
{
->refresh token is not necesarry its a modern practise.
->difference bw two is their expiry..
->access are short-lived whereas refresh are long-lived
->if i have access token ..so i can use that token to
authorise anything.
->lets say i expired the accesss tokenin like 15 min of the login
session...then user have to login again..
here comes the refresh token...
user have to connect an endpoint...if the refresh token matches the one in the database..
user will be provided with a new access token
}

app.use() and req parameter connection
{
The Connection Explained
Think of an Express application as an assembly line.

The Request (req): An incoming HTTP request is like a basic car chassis starting down the line.
The req object contains all the initial parts and information about this specific request (like headers, URL, and query parameters).

The Middleware Registration (app.use()): app.use(myMiddleware) is like adding a new workstation to the assembly line.
You're telling Express, "For incoming requests, make them stop at this station."

The Middleware Function: The middleware itself is the worker or robot at that station.
Its job signature is always (req, res, next).
 When the chassis (req) arrives at the station, the worker (middleware) can do one of three things:

->Read the req object: Inspect the chassis for information.

->Modify the req object: Add a new part to the chassis.

->End the process: Send a response back (res.send()).

->Pass it along: Call next() to send the chassis to the next station.
}