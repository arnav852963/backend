SUPER KEY WORD:

{

    so jab super call hota hai....toh jo bhi propewrty parent intialise krta hai
    vo child ke 'this' mei hoti hai ...aur parent ke this se koi relation nai....

     code snippet example
    /*
    class A {
  constructor() {
    this.name = "Parent";
    console.log("Inside A:", this);
  }
}

class B extends A {
  constructor() {
    super(); // Ask parent to do their setup
    this.name = "Child"; // Override or add more
    console.log("Inside B:", this);
  }
}

const obj = new B();

     */
    // here
    /*
    You say: new B()

Inside Bâ€™s constructor, it calls super() â†’ this means:
ðŸ‘‰ "Hey Parent (A), please run your constructor!"

Parent class (A) runs. It sets this.name = "Parent"
But wait â€” what is this here?
ðŸ‘‰ It's the child object being created (B), not some separate "A".

Then control comes back to B, and it says
this.name = "Child" â€” so it updates the same object.

So, the final object is a B object that was initialized by A
     */

    // soo

    /*
    this in the child is its own object.

But when super() is called, the parent works on the same object.

So the parent doesnâ€™t return something new â€” it helps the child get set up.


     */
}
